/*	Schema:	G ----	D ----	A ----	E ----		Key code chart		G --> 1 	2	 3	4	5 	6 	7 	8 	9 	0 	- 	=		  --> 49 	50 	51 	52 	53 	54 	55 	56 	57 	48 	189 187		D --> q	 	w	 e	 r	 t	 y	 u	 i	 o	 p	 [ 		]		  --> 81	87	 69	 82	 84  89	 85	 73	 79	 80	 219	221		A --> a 	s	 d	 f	 g	 h	 j	 k	 l	 ;	 	'		  --> 65 	83 	68 	70 	71 	72 	74 	75 	76	 186 	222		E --> z		x	c	v	b	n	m	,		.		/		  --> 90	88	67	86	66	78	77	188		190		191*/package com {		import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.IEventDispatcher;	import flash.events.*;	import org.fwiidom.osc.*;	import flash.utils.setInterval;	import flash.utils.clearInterval;	import caurina.transitions.*;	import com.Random;	import flash.display.Stage;	import flash.geom.ColorTransform;	import flash.geom.Transform;	public class ShredBoard extends MovieClip {				private var on:Boolean = false;		private var flosc:OSCConnection;		private var packet:OSCPacket;		private var synthID:Number = 2;				//set the base frequencies		private var string4BaseFreq:Number	=	196.00;  //G		private var string3BaseFreq:Number	=	146.83;  //D		private var string2BaseFreq:Number	=	110.000; //A		private var string1BaseFreq:Number	=	82.407;  //E		private var freqSteps:Number		=	1.0594;		private var frequency:Number		=	0;				//variables for pedal controls		//chillzoid		public var sustain1:Number;		public var speed1:Number;		public var depth1:Number;		public var amp1:Number;		//mighty stomp		public var sustain2:Number;		public var preamp2:Number;		public var amp2:Number;				//the square borders		private var BOX_WIDTH:int = 44 + 7;		private var borders:squareBorder;		private var borderSquares1:Sprite;		private var borderSquares2:Sprite;		private var borderSquares3:Sprite;		private var borderSquares4:Sprite;				//the square fills		private var squares:squareFill;		private var squares1:Sprite;		private var squares2:Sprite;		private var squares3:Sprite;		private var squares4:Sprite;		private var allSquares:Array = [];				//[x, y] coords for rows		private var ROW1_BEGIN:Array = [192, 154];		private var ROW2_BEGIN:Array = [215, 203];		private var ROW3_BEGIN:Array = [227, 252];		private var ROW4_BEGIN:Array = [254, 302];				//animation variables		private var pause:uint;		private var counter:int;		private var squareID:int;				//keycodes array		private var keyCodesArray:Array = [	49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187, 											81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221, 											65, 83, 68, 70, 71, 72, 74, 75, 76, 186, 222, 											90, 88, 67, 86, 66, 78, 77, 188, 190, 191];				private var mightyStompOn:Boolean = false;				private var col:uint;		private var cTransform:ColorTransform = transform.colorTransform;													public function ShredBoard() {			chillZoid.mc = this;			chillZoid.init();			mightyStomp.mc = this;			mightyStomp.init();			createSquareBorders();			//trace("good to go");			//connect to the osc server			flosc = new OSCConnection("127.0.0.1", 12009);			flosc.connect();			flosc.addEventListener(OSCConnectionEvent.ON_CONNECT, _onOSCConnect);			flosc.addEventListener(OSCConnectionEvent.ON_CONNECT_ERROR, _onOSCConnectError);			//configure listeners for the pedals			//keyboard			stage.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP, _onKeyUp);			theStage.addEventListener(MouseEvent.MOUSE_DOWN, _onMouseDown);			theStage.addEventListener(MouseEvent.MOUSE_UP, _onMouseUp);			chromeBar.addEventListener(MouseEvent.MOUSE_DOWN, _chromeBar);		}				public function _chromeBar(event:MouseEvent):void {			stage.nativeWindow.startMove();		}				//create the squares		public function createSquareBorders():void {			//row 1			borderSquares1 = new Sprite();			borderSquares1.x = ROW1_BEGIN[0];			borderSquares1.y = ROW1_BEGIN[1];			addChild(borderSquares1);						squares1 = new Sprite();			squares1.x = ROW1_BEGIN[0];			squares1.y = ROW1_BEGIN[1];			addChild(squares1);						for(var i:uint = 0; i < 12; i++) {				borders = new squareBorder();				borderSquares1.addChild(borders);				borders.x = BOX_WIDTH * i;								squares = new squareFill();				squares1.addChild(squares);				squares.x = BOX_WIDTH * i;				allSquares.push(squares);			}						//row 2			borderSquares2 = new Sprite();			borderSquares2.x = ROW2_BEGIN[0];			borderSquares2.y = ROW2_BEGIN[1];			addChild(borderSquares2);						squares2 = new Sprite();			squares2.x = ROW2_BEGIN[0];			squares2.y = ROW2_BEGIN[1];			addChild(squares2);						for(var j:uint = 0; j < 12; j++) {				borders = new squareBorder();				borderSquares2.addChild(borders);				borders.x = BOX_WIDTH * j;								squares = new squareFill();				squares2.addChild(squares);				squares.x = BOX_WIDTH * j;				allSquares.push(squares);			}						//row 3			borderSquares3 = new Sprite();			borderSquares3.x = ROW3_BEGIN[0];			borderSquares3.y = ROW3_BEGIN[1];			addChild(borderSquares3);						squares3 = new Sprite();			squares3.x = ROW3_BEGIN[0];			squares3.y = ROW3_BEGIN[1];			addChild(squares3);						for(var k:uint = 0; k < 11; k++) {				borders = new squareBorder();				borderSquares3.addChild(borders);				borders.x = BOX_WIDTH * k;								squares = new squareFill();				squares3.addChild(squares);				squares.x = BOX_WIDTH * k;				allSquares.push(squares);			}						//row 4			borderSquares4 = new Sprite();			borderSquares4.x = ROW4_BEGIN[0];			borderSquares4.y = ROW4_BEGIN[1];			addChild(borderSquares4);						squares4 = new Sprite();			squares4.x = ROW4_BEGIN[0];			squares4.y = ROW4_BEGIN[1];			addChild(squares4);						for(var l:uint = 0; l < 10; l++) {				borders = new squareBorder();				borderSquares4.addChild(borders);				borders.x = BOX_WIDTH * l;								squares = new squareFill();				squares4.addChild(squares);				squares.x = BOX_WIDTH * l;				allSquares.push(squares);			}						//pause = setInterval(introFade, 0.25);			introFade();					}				public function _onMouseDown($e:MouseEvent):void {			//trace($e.target + " clicked");			mightyStomp.gotoAndStop("press");			mightyStompOn = !mightyStompOn;		}				public function _onMouseUp($e:MouseEvent):void {			//trace($e.target + " released");			if(mightyStompOn == true) {				mightyStomp.gotoAndStop("on");				chillZoid.gotoAndStop("off");			} else {				mightyStomp.gotoAndStop("off");				chillZoid.gotoAndStop("on");			}			//trace("is the target on = " + $e.target.on);		}				//OSC		public function _onOSCConnect(event:OSCConnectionEvent):void {			trace("connected to server");			readyLight.gotoAndStop("on");		}				public function _onOSCConnectError(event:OSCConnectionEvent):void {			connectMessage.text = "Oops! Couldn't connect to the server.";		}				public function _sendPacket($freq:Number):void {			//packet = new OSCPacket("/s_new", ["clean", synthID, 0, 0, "freq", $freq], "127.0.0.1", 12000);			//trace("sustain1 = " + sustain1 + " speed1 = " + speed1 + " depth1 = " + depth1 + " amp1 = " + amp1);			//trace("sustain2 = " + sustain2 + " preamp2 = " + preamp2 + " amp2 = " + amp2);			//effects are off			if(mightyStompOn) {				//packet = new OSCPacket("/s_new", ["chillzoid", synthID, 0, 0, "freq", $freq, "sustain", sustain1, "speed", speed1, "depth", depth1, "amp", amp1], "127.0.0.1", 12000);				packet = new OSCPacket("/s_new", ["mightystomp", synthID, 0, 0, "freq", $freq, "sustain", sustain2, "preamp", preamp2, "amp", amp2], "127.0.0.1", 12000);			} else {				packet = new OSCPacket("/s_new", ["chillzoid", synthID, 0, 0, "freq", $freq, "sustain", sustain1, "speed", speed1, "depth", depth1, "amp", amp1], "127.0.0.1", 12000);			}						flosc.sendOSCPacket(packet);			synthID++;		}				//keyboard		/*		Key code chart		G --> 1 	2	 3	4	5 	6 	7 	8 	9 	0 	- 	=		  --> 49 	50 	51 	52 	53 	54 	55 	56 	57 	48 	189 187		*/		public function _onKeyDown($e:KeyboardEvent):void {			//trace("you pressed " + $e.keyCode);			animateIn($e.keyCode);			//row 1 basefrequency G from 1 to =			switch ($e.keyCode) {				case 49:					frequency = string4BaseFreq;					_sendPacket(frequency);					break;				case 50:					frequency = string4BaseFreq * freqSteps;					_sendPacket(frequency);					break;				case 51:					frequency = string4BaseFreq * Math.pow(freqSteps, 2);					_sendPacket(frequency);					break;				case 52:					frequency = string4BaseFreq * Math.pow(freqSteps, 3);					_sendPacket(frequency);					break;				case 53:					frequency = string4BaseFreq * Math.pow(freqSteps, 4);					_sendPacket(frequency);					break;				case 54:					frequency = string4BaseFreq * Math.pow(freqSteps, 5);					_sendPacket(frequency);					break;				case 55:					frequency = string4BaseFreq * Math.pow(freqSteps, 6);					_sendPacket(frequency);					break;				case 56:					frequency = string4BaseFreq * Math.pow(freqSteps, 7);					_sendPacket(frequency);					break;				case 57:					frequency = string4BaseFreq * Math.pow(freqSteps, 8);					_sendPacket(frequency);					break;				case 48:					frequency = string4BaseFreq * Math.pow(freqSteps, 9);					_sendPacket(frequency);					break;				case 189:					frequency = string4BaseFreq * Math.pow(freqSteps, 10);					_sendPacket(frequency);					break;				case 187:					frequency = string4BaseFreq * Math.pow(freqSteps, 11);					_sendPacket(frequency);					break;							}			/*			D --> q	 	w	 e	 r	 t	 y	 u	 i	 o	 p	 [ 		]		  	  --> 81	87	 69	 82	 84  89	 85	 73	 79	 80	 219	221			*/			//row 2 basefrequency D from q to ]			switch ($e.keyCode) {				case 81:					frequency = string3BaseFreq;					_sendPacket(frequency);					break;				case 87:					frequency = string3BaseFreq * freqSteps;					_sendPacket(frequency);					break;				case 69:					frequency = string3BaseFreq * Math.pow(freqSteps, 2);					_sendPacket(frequency);					break;				case 82:					frequency = string3BaseFreq * Math.pow(freqSteps, 3);					_sendPacket(frequency);					break;				case 84:					frequency = string3BaseFreq * Math.pow(freqSteps, 4);					_sendPacket(frequency);					break;				case 89:					frequency = string3BaseFreq * Math.pow(freqSteps, 5);					_sendPacket(frequency);					break;				case 85:					frequency = string3BaseFreq * Math.pow(freqSteps, 6);					_sendPacket(frequency);					break;				case 73:					frequency = string3BaseFreq * Math.pow(freqSteps, 7);					_sendPacket(frequency);					break;				case 79:					frequency = string3BaseFreq * Math.pow(freqSteps, 8);					_sendPacket(frequency);					break;				case 80:					frequency = string3BaseFreq * Math.pow(freqSteps, 9);					_sendPacket(frequency);					break;				case 219:					frequency = string3BaseFreq * Math.pow(freqSteps, 10);					_sendPacket(frequency);					break;				case 221:					frequency = string3BaseFreq * Math.pow(freqSteps, 11);					_sendPacket(frequency);					break;			}						/*row 3 basefrequency A from a to '						A --> a 	s	 d	 f	 g	 h	 j	 k	 l	 ;	 	'		  	  --> 65 	83 	68 	70 	71 	72 	74 	75 	76	 186 	222		  			*/			switch ($e.keyCode) {				case 65:					frequency = string2BaseFreq;					_sendPacket(frequency);					break;				case 83:					frequency = string2BaseFreq * freqSteps;					_sendPacket(frequency);					break;				case 68:					frequency = string2BaseFreq * Math.pow(freqSteps, 2);					_sendPacket(frequency);					break;				case 70:					frequency = string2BaseFreq * Math.pow(freqSteps, 3);					_sendPacket(frequency);					break;				case 71:					frequency = string2BaseFreq * Math.pow(freqSteps, 4);					_sendPacket(frequency);					break;				case 72:					frequency = string2BaseFreq * Math.pow(freqSteps, 5);					_sendPacket(frequency);					break;				case 74:					frequency = string2BaseFreq * Math.pow(freqSteps, 6);					_sendPacket(frequency);					break;				case 75:					frequency = string2BaseFreq * Math.pow(freqSteps, 7);					_sendPacket(frequency);					break;				case 76:					frequency = string2BaseFreq * Math.pow(freqSteps, 8);					_sendPacket(frequency);					break;				case 186:					frequency = string2BaseFreq * Math.pow(freqSteps, 9);					_sendPacket(frequency);					break;				case 222:					frequency = string2BaseFreq * Math.pow(freqSteps, 10);					_sendPacket(frequency);					break;			}						/*row 4 basefrequency E from z to /						E --> z		x	c	v	b	n	m	,		.		/			  --> 90	88	67	86	66	78	77	188		190		191		  			*/			switch ($e.keyCode) {				case 90:					frequency = string1BaseFreq;					_sendPacket(frequency);					break;				case 88:					frequency = string1BaseFreq * freqSteps;					_sendPacket(frequency);					break;				case 67:					frequency = string1BaseFreq * Math.pow(freqSteps, 2);					_sendPacket(frequency);					break;				case 86:					frequency = string1BaseFreq * Math.pow(freqSteps, 3);					_sendPacket(frequency);					break;				case 66:					frequency = string1BaseFreq * Math.pow(freqSteps, 4);					_sendPacket(frequency);					break;				case 78:					frequency = string1BaseFreq * Math.pow(freqSteps, 5);					_sendPacket(frequency);					break;				case 77:					frequency = string1BaseFreq * Math.pow(freqSteps, 6);					_sendPacket(frequency);					break;				case 188:					frequency = string1BaseFreq * Math.pow(freqSteps, 7);					_sendPacket(frequency);					break;				case 190:					frequency = string1BaseFreq * Math.pow(freqSteps, 8);					_sendPacket(frequency);					break;				case 191:					frequency = string1BaseFreq * Math.pow(freqSteps, 9);					_sendPacket(frequency);					break;			}					}				public function _onKeyUp($e:KeyboardEvent):void {			//trace("you released" + $e.keyCode);		}				private function introFade():void {			pause = setInterval(fadeOut, 0.05);		}				//animation functions		private function fadeOut():void {			Tweener.addTween(allSquares[counter], {alpha: 0, time: 0.5, transition: "linear"});			Tweener.addTween(allSquares[allSquares.length - counter], {alpha: 0, time: 0.5, transition: "linear"});			if(counter >= allSquares.length/2) {				clearInterval(pause);			} else {				counter++;			}		}				//display box		private function animateIn($e:Number):void {						for(var i:uint = 0; i < keyCodesArray.length; i++) {				//col = Math.random() * 0xFF0000;				//cTransform.color = col;				if($e == keyCodesArray[i]) {					//trace("match!" + $e);					//allSquares[i].transform.colorTransform = cTransform;					Tweener.addTween(allSquares[i], {alpha: 1, time: 0.25, transition: "linear"});					Tweener.addTween(allSquares[i], {alpha: 0, time: 0.25, delay: 0.25, transition: "linear"});				}				}		}							}}